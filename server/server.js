const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const frontMatter = require('front-matter');
const cors = require('cors');
const NodeCache = require('node-cache');
const chokidar = require('chokidar');

const app = express();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3002;
const NODE_ENV = process.env.NODE_ENV || 'development';
const CORS_ORIGIN = process.env.CORS_ORIGIN || (NODE_ENV === 'production' ? 'https://braint.ru' : 'http://localhost:5173');

// –ö—ç—à –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç–µ–π
const searchCache = new NodeCache({ stdTTL: 600 });

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
const corsOptions = {
  origin: NODE_ENV === 'development' ? ['http://localhost:5173', 'http://localhost:3000'] : CORS_ORIGIN,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url} - ${req.ip}`);
  next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è dev –∏ prod
const staticPath = NODE_ENV === 'production' 
  ? path.join(__dirname, '../dist') 
  : path.join(__dirname, '../public');

console.log(`üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: ${staticPath}`);
app.use(express.static(staticPath));

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ public –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
app.use('/articles', express.static(path.join(__dirname, '../public/articles')));

let articlesCache = null;
let cacheTime = null;
const CACHE_TTL = NODE_ENV === 'development' ? 5000 : 300000; // 5 —Å–µ–∫ –≤ dev, 5 –º–∏–Ω –≤ prod

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
const clearCache = () => {
  articlesCache = null;
  cacheTime = null;
  searchCache.flushAll();
  console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤');
};

const loadArticles = async () => {
  const now = Date.now();
  
  // –í dev —Ä–µ–∂–∏–º–µ –∫—ç—à –∂–∏–≤–µ—Ç —Ç–æ–ª—å–∫–æ 5 —Å–µ–∫—É–Ω–¥, –≤ prod - 5 –º–∏–Ω—É—Ç
  if (articlesCache && cacheTime && (now - cacheTime) < CACHE_TTL) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π');
    return articlesCache;
  }
  
  console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–µ–π...');

  const articlesDir = path.join(__dirname, '../public/articles');
  const articles = [];

  try {
    const files = await fs.readdir(articlesDir);
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ articles: ${files.length}`);

    for (const file of files) {
      if (file.endsWith('.mdx')) {
        const filePath = path.join(articlesDir, file);
        const content = await fs.readFile(filePath, 'utf-8');
        let lastModifiedIso = null;
        try {
          const stat = await fs.stat(filePath);
          lastModifiedIso = new Date(stat.mtime).toISOString();
        } catch (_) {}
        const { attributes } = frontMatter(content);

        if (!attributes.title || !attributes.category || !Array.isArray(attributes.tags)) {
          console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä –≤ —Ñ–∞–π–ª–µ ${file}`);
          continue;
        }

        articles.push({
          id: file.replace('.mdx', ''),
          title: attributes.title,
          category: attributes.category,
          tags: attributes.tags,
          path: `/articles/${file.replace('.mdx', '')}`,
          lastModified: lastModifiedIso,
          aliases: Array.isArray(attributes.aliases)
            ? attributes.aliases
            : (attributes.aliases ? [attributes.aliases] : []),
        });
      }
    }

    articlesCache = articles;
    cacheTime = Date.now();
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π`);
    return articles;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π:', error.message);
    return [];
  }
};

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
app.get('/api/articles', async (req, res) => {
  try {
    const articles = await loadArticles();
    res.json(articles);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
    res.status(500).json({ error: 'Failed to load articles' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw MDX
app.get('/api/articles/:slug', async (req, res) => {
  const { slug } = req.params;
  const cacheKey = `article:${slug}`;
  
  try {
    const cached = searchCache.get(cacheKey);
    if (cached) {
      console.log(`–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è: ${slug}`);
      return res.json(cached);
    }

    const articlesDir = path.join(__dirname, '../public/articles');
    const filePath = path.join(articlesDir, `${slug}.mdx`);
    
    const content = await fs.readFile(filePath, 'utf-8');
    const { attributes, body } = frontMatter(content);
    
    const articleData = {
      slug,
      content: body, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º raw MDX –∫–æ–Ω—Ç–µ–Ω—Ç
      frontMatter: attributes,
      title: attributes.title || slug,
      category: attributes.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    };
    
    searchCache.set(cacheKey, articleData);
    res.json(articleData);
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ ${slug}:`, error.message);
    if (error.code === 'ENOENT') {
      return res.status(404).json({ error: 'Article not found' });
    }
    res.status(500).json({ error: 'Failed to load article' });
  }
});

// API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
app.get('/api/search', async (req, res) => {
  const rawQuery = String(req.query.q || '').trim();
  const limit = parseInt(req.query.limit) || 5;
  const cacheKey = `search:${rawQuery}:${limit}`;
  console.log(`–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: q=${rawQuery}, limit=${limit}`);

  try {
    const cached = searchCache.get(cacheKey);
    if (cached) {
      console.log(`–í–æ–∑–≤—Ä–∞—â—ë–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${cacheKey}`);
      return res.json(cached);
    }

    const articles = await loadArticles();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä, –¥–µ—Ñ–∏—Å—ã, –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∞, —ë‚Üí–µ)
    const normalize = (s = '') => String(s)
      .toLowerCase()
      .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
      .replace(/—ë/g, '–µ')
      .replace(/[\-_/.,]+/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();

    const q = normalize(rawQuery);
    const tokens = q.length ? q.split(' ') : [];

    const scoreArticle = (a) => {
      const title = normalize(a.title);
      const category = normalize(a.category);
      const tags = (a.tags || []).map(normalize).join(' ');
      const aliases = (a.aliases || []).map(normalize).join(' ');
      const id = normalize(a.id);

      const haystackAll = [title, category, tags, aliases, id].join(' ');
      if (!tokens.length) return 0;

      let score = 0;
      for (const t of tokens) {
        const inTitle = title.includes(t);
        const inAliases = aliases.includes(t);
        const inTags = tags.includes(t);
        const inCategory = category.includes(t);
        const inId = id.includes(t);
        if (inTitle) score += 3;
        if (inAliases) score += 3;
        if (inTags) score += 1;
        if (inCategory) score += 1;
        if (inId) score += 1;
      }

      // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ª—é–±–æ–π –∏–∑ —Å—Ç—Ä–æ–∫
      if (haystackAll.includes(q)) score += 2;
      return score;
    };

    const scored = articles
      .map(a => ({ a, score: scoreArticle(a) }))
      .filter(x => x.score > 0)
      .sort((x, y) => y.score - x.score)
      .slice(0, limit)
      .map(x => x.a);

    searchCache.set(cacheKey, scored);
    res.json(scored);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
    res.status(500).json({ error: 'Failed to search articles' });
  }
});


// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    environment: NODE_ENV,
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'API endpoint not found' });
  }
  
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–¥–∞–µ–º index.html –∏–∑ dist, –≤ dev –∏–∑ public
  const indexPath = NODE_ENV === 'production' 
    ? path.join(__dirname, '../dist/index.html')
    : path.join(__dirname, '../public/index.html');
    
  res.sendFile(indexPath);
});



const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://0.0.0.0:${PORT}`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${NODE_ENV}`);
  console.log(`üîó CORS —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è: ${Array.isArray(corsOptions.origin) ? corsOptions.origin.join(', ') : corsOptions.origin}`);
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  loadArticles().then(articles => {
    console.log(`üìö –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π`);
  });
});

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π watcher –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
const articlesDir = path.join(__dirname, '../public/articles');
const watcher = chokidar.watch(articlesDir, {
  ignored: /(^|[\/\\])\../, // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
  persistent: true
});

watcher
  .on('add', (filePath) => {
    console.log(`üìÑ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω: ${path.basename(filePath)}`);
    clearCache();
  })
  .on('change', (filePath) => {
    console.log(`üìù –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω: ${path.basename(filePath)}`);
    clearCache();
  })
  .on('unlink', (filePath) => {
    console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${path.basename(filePath)}`);
    clearCache();
  })
  .on('ready', () => {
    console.log('üëÄ –§–∞–π–ª–æ–≤—ã–π watcher –≥–æ—Ç–æ–≤ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ articles');
  })
  .on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ watcher:', error);
  });

server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç! –ò–∑–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT`);
  }
  process.exit(1);
});

// Graceful shutdown
const gracefulShutdown = (signal) => {
  console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
  server.close(() => {
    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    searchCache.flushAll();
    watcher.close().then(() => {
      console.log('‚úÖ –§–∞–π–ª–æ–≤—ã–π watcher –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.error('‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.error(error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', reason);
  console.error('Promise:', promise);
});